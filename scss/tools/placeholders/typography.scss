@import '../../settings/typography';
@import '../mixins/baseline';
@import '../functions/core.scss';
/* Default header styles */

%h-base {
  margin-top: $header-top-margin;
  margin-bottom: $header-bottom-margin;
  font-family: $header-font-family;
  font-style: $header-font-style;
  font-weight: $header-font-weight;
  line-height: $header-line-height;
  color: inherit;
  text-rendering: $header-text-rendering;

  small {
    font-size: $small-font-size;
    line-height: 0;
    color: $small-font-color;
  }

  @media #{$medium-up} {
    line-height: $header-line-height;
  }
}

%title-heading-base {
  font-size: $title-heading-font-size - $h1-font-reduction;

  @media #{$medium-up} {
    font-size: $title-heading-font-size;
  }
}

%h1-base {
  @extend %h-base;

  font-size: $h1-font-size - $h1-font-reduction;

  @media #{$medium-up} {
    font-size: $h1-font-size;
  }
}

%h2-base {
  @extend %h-base;

  font-size: $h2-font-size - $h2-font-reduction;

  @media #{$medium-up} {
    font-size: $h2-font-size;
  }
}

%h3-base {
  @extend %h-base;

  font-size: $h3-font-size - $h3-font-reduction;

  @media #{$medium-up} {
    font-size: $h3-font-size;
  }
}

%h4-base {
  @extend %h-base;

  font-size: $h4-font-size - $h4-font-reduction;

  @media #{$medium-up} {
    font-size: $h4-font-size;
  }
}

%h5-base {
  @extend %h-base;

  font-size: $h5-font-size - $h5-font-reduction;

  @media #{$medium-up} {
    font-size: $h5-font-size;
  }
}

%h6-base {
  @extend %h-base;

  font-size: $paragraph-font-size - $h6-font-reduction;

  @media #{$medium-up} {
    font-size: $h6-font-size;
  }
}

%body-small {
  font-size: $body-small-font-size;
}

%body-smallest {
  font-size: $body-smallest-font-size;
}

// TODO: Update later
%copy-spacing {
  h1,
  .h1 {
    margin-bottom: rem-calc(64);
  }

  h2,
  .h2 {
    margin-bottom: rem-calc(48);
  }

  h3,
  .h3 {
    margin-bottom: rem-calc(48);
  }

  h4,
  .h4 {
    margin-bottom: rem-calc(24);
  }

  h5,
  .h5 {
    margin-bottom: rem-calc(24);
  }

  h6,
  .h6 {
    margin-bottom: rem-calc(24);
  }

  p,
  .p {
    margin-bottom: rem-calc(24);
  }

  .body-smallest {
    margin-bottom: rem-calc(16);
  }
}

/* begin type creator */

@each $type in map-keys($fontSizes) {
  $fontFace: '' !default;
  $lineHeight: '' !default; // get font faces

  @if map-has-key($fontFaces, $type) {
    $fontFace: map-get($fontFaces, $type);
  } // get font sizes
  $fontSize: map-get($fontSizes, $type); // get line heights

  @if map-has-key($lineHeights, $type) {
    $lineHeight: map-get($lineHeights, $type) /
      (map-get($lineHeights, $type) * 0 + 1);
  } // create type placeholder
  %#{$type} {
    // optionally extend a base placeholder
    @extend %#{$type}-base !optional;

    @if $fontFace != '' {
      font-family: $fontFace;
    } // set baseline spacing

    @include vr-baseline(
      $fontSize,
      $line-height: $lineHeight
    ); // set line height rounded to the nearest pixel

    line-height: $lineHeight + 0.00001; // add conversion classes

    @each $tp in map-keys($fontSizes) {
      // set line-height var
      $lh: '' !default; // get font size
      $fs: map-get($fontSizes, $tp); // get line heights

      @if map-has-key($lineHeights, $tp) {
        $lh: map-get($lineHeights, $tp) / (map-get($lineHeights, $tp) * 0 + 1);
      }

      @if $type !=$tp and $fs <=$fontSize {
        // assign utility class and parse underscore
        &.#{$tp} {
          font-size: $fs;
          line-height: $lh; // set vertical center utility
          &.v-center {
            line-height: $lineHeight * $fontSize;
          } // set text alignment
          &:not(.v-center) {
            @include vr-baseline(
              $fs,
              $from: $fontSize,
              $line-height: $lh,
              $from-line-height: $lineHeight
            );
          }
        }
      }
    } // set vertical center to bottom utility
    &.v-bottom {
      transform: translateY($base-cap-height);
    }
  } // element extends placeholder
  #{$type} {
    @extend %#{$type};
  }
}
